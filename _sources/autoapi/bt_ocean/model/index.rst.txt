:py:mod:`bt_ocean.model`
========================

.. py:module:: bt_ocean.model

.. autoapi-nested-parse::

   Finite difference solvers for the 2D barotropic vorticity equation on a
   beta-plane.

   ..
       !! processed by numpydoc !!


Module Contents
---------------


.. py:class:: Parameters(parameters, *, defaults=None)




   
   Model parameters.


   :Parameters:

       **parameters** : Mapping
           Model parameters.

       **defaults** : Mapping
           Defines valid keys and default values. The sentinel value `required`
           indicates that a non-default value is required. The sentinel value
           `optional' can be used to indicate that the parameter is optional, but
           that no default value is required. If not supplied then all parameters
           are assumed to be optional.














   ..
       !! processed by numpydoc !!
   .. py:method:: write(h, path='parameters')

      
      Write parameters.


      :Parameters:

          **h** : :class:`h5py.Group` or :class:`zarr.hierarchy.Group`
              Parent group.

          **path** : str
              Group path.



      :Returns:

          :class:`h5py.Group` or :class:`zarr.hierarchy.Group`
              Group storing the parameters.











      ..
          !! processed by numpydoc !!

   .. py:method:: read(h, path='parameters')
      :classmethod:

      
      Read parameters.


      :Parameters:

          **h** : :class:`h5py.Group` or :class:`zarr.hierarchy.Group`
              Parent group.

          **path** : str
              Group path.



      :Returns:

          :class:`.Parameters`
              The parameters.











      ..
          !! processed by numpydoc !!


.. py:class:: Fields(grid, keys)




   
   Fields defined on a 2D grid.

   Fields values can be set using

   .. code::

       fields[key] = array

   and must be set before they can be accessed.

   :Parameters:

       **grid** : :class:`.Grid`
           The 2D grid.

       **keys** : Iterable
           Field keys.














   ..
       !! processed by numpydoc !!
   .. py:property:: grid
      :type: bt_ocean.grid.Grid

      
      The 2D grid.
















      ..
          !! processed by numpydoc !!

   .. py:method:: zero(*keys)

      
      Set fields equal to a zero-valued field.


      :Parameters:

          **keys** : tuple
              The keys of fields to set equal to a zero-valued field.














      ..
          !! processed by numpydoc !!

   .. py:method:: clear(*, keep_keys=None)

      
      Clear values for fields.


      :Parameters:

          **keep_keys** : Iterable
              Keys for fields which should be retained.














      ..
          !! processed by numpydoc !!

   .. py:method:: write(h, path='fields')

      
      Write fields.


      :Parameters:

          **h** : :class:`h5py.Group` or :class:`zarr.hierarchy.Group`
              Parent group.

          **path** : str
              Group path.



      :Returns:

          :class:`h5py.Group` or :class:`zarr.hierarchy.Group`
              Group storing the fields.











      ..
          !! processed by numpydoc !!

   .. py:method:: read(h, path='fields', *, grid=None)
      :classmethod:

      
      Read fields.


      :Parameters:

          **h** : :class:`h5py.Group` or :class:`zarr.hierarchy.Group`
              Parent group.

          **path** : str
              Group path.

          **grid** : :class:`.Grid`
              The 2D grid.



      :Returns:

          :class:`.Fields`
              The fields.











      ..
          !! processed by numpydoc !!

   .. py:method:: update(d)

      
      Update field values from the supplied :class:`Mapping`.


      :Parameters:

          **d** : Mapping
              Key-value pairs containing the field values.














      ..
          !! processed by numpydoc !!


.. py:exception:: SteadyStateMaximumIterationsError




   
   Raised when a steady-state solve exceeds the maximum permitted number of
   iterations.
















   ..
       !! processed by numpydoc !!

.. py:exception:: NanEncounteredError




   
   Raised when a NaN is encountered.
















   ..
       !! processed by numpydoc !!

.. py:class:: Solver(parameters, *, idtype=None, fdtype=None, field_keys=None, prescribed_field_keys=None)




   
   Finite difference solver for the 2D barotropic vorticity equation on a
   beta-plane,

   .. math::

       \partial_t \zeta
           + \nabla \cdot ( (\nabla^\perp \psi) \zeta )
           + \beta \partial_x \psi
           = \nu \nabla^2 \zeta
           - r \zeta
           + Q,

   where

   .. math::

       \nabla^2 \psi = \zeta,

   subject to no-normal flow and free-slip boundary conditions.

   :Parameters:

       **parameters** : :class:`.Parameters`
           Model parameters.
           
               - `'L_x'` : Defines the :math:`x`-dimension extents, :math:`x \in
                 [ -L_x, L_x ]`.
               - `'L_y'` : Defines the :math:`y`-dimension extents, :math:`y \in
                 [ -L_y, L_y ]`.
               - `'N_x'` : Number of :math:`x`-dimension divisions.
               - `'N_y'` : Number of :math:`y`-dimension divisions.
               - `'\beta'` : :math:`y` derivative of the Coriolis parameter,
                 :math:`\beta`.
               - `'\nu'` : Laplacian viscosity coefficient, :math:`\nu`.
               - `'r'` : Linear drag coefficient, :math:`r`.
               - `dt` : Time step size.

       **idtype** : type
           Integer scalar data type. Defaults to :func:`.default_idtype()`.

       **fdtype** : type
           Floating point scalar data type. Defaults to :func:`.default_fdtype()`.

       **field_keys** : Iterable
           Keys for fields. The following keys are added by default
           
               - `'psi'` : The current stream function field.
               - `'zeta'` : The current relative vorticity field.
               - `'Q'` : A field defining an extra term in the vorticity equation,
                 :math:`Q`. Defaults to a zero-valued field.

       **prescribed_field_keys** : Iterable
           Keys for fields which are prescribed, and which are not updated within
           a timestep. Defaults to `{'Q'}`.














   ..
       !! processed by numpydoc !!
   .. py:property:: n

      
      The number of timesteps which have been taken.
















      ..
          !! processed by numpydoc !!

   .. py:property:: grid
      :type: bt_ocean.grid.Grid

      
      2D grid.
















      ..
          !! processed by numpydoc !!

   .. py:property:: parameters
      :type: Parameters

      
      Model parameters.
















      ..
          !! processed by numpydoc !!

   .. py:property:: fields
      :type: Fields

      
      Fields.
















      ..
          !! processed by numpydoc !!

   .. py:property:: prescribed_field_keys
      :type: tuple

      
      Keys of prescribed fields.
















      ..
          !! processed by numpydoc !!

   .. py:method:: beta() -> jax.Array

      
      :math:`y` derivative of the Coriolis parameter, :math:`\beta`.
















      ..
          !! processed by numpydoc !!

   .. py:method:: nu() -> jax.Array

      
      Laplacian viscosity coefficient, :math:`\nu`.
















      ..
          !! processed by numpydoc !!

   .. py:method:: r() -> jax.Array

      
      Linear drag coefficient, :math:`r`.
















      ..
          !! processed by numpydoc !!

   .. py:method:: dt() -> jax.Array

      
      Time step size.
















      ..
          !! processed by numpydoc !!

   .. py:method:: poisson_solver() -> bt_ocean.inversion.PoissonSolver

      
      Solver for the Poisson equation.
















      ..
          !! processed by numpydoc !!

   .. py:method:: zero_prescribed()

      
      Zero prescribed fields.
















      ..
          !! processed by numpydoc !!

   .. py:method:: initialize(zeta=None)
      :abstractmethod:

      
      Initialize the model.


      :Parameters:

          **zeta** : :class:`jax.Array`
              Initial relative vorticity field. `None` indicates a zero-valued
              field.














      ..
          !! processed by numpydoc !!

   .. py:method:: step()
      :abstractmethod:

      
      Take a timestep.
















      ..
          !! processed by numpydoc !!

   .. py:method:: steps(n, *, unroll=8)

      
      Take multiple timesteps. Uses :func:`jax.lax.fori_loop`.


      :Parameters:

          **n** : Integral
              The number of timesteps to take.

          **unroll** : Integral
              Passed to :func:`jax.lax.fori_loop`.














      ..
          !! processed by numpydoc !!

   .. py:method:: ke()

      
      The current kinetic energy, divided by density.





      :Returns:

          Real
              The current kinetic energy.











      ..
          !! processed by numpydoc !!

   .. py:method:: ke_spectrum()

      
      The current 2D kinetic energy spectrum.

      Computed using a type-I DST. The spectrum is defined so that the sum of
      the spectrum equals the current kinetic energy divided by the density.




      :Returns:

          :class:`jax.Array`
              The current 2D kinetic energy spectrum.











      ..
          !! processed by numpydoc !!

   .. py:method:: steady_state_solve(*args, update=lambda model, *args: None, tol, max_it=10000, _min_n=0)

      
      Timestep to steady-state.

      Uses timestepping to define a fixed-point iteration, and applies
      reverse mode differentiation using a two-phase approach.

      References:

          - Andreas Griewank and Andrea Walther, 'Evaluating derivatives',
            second edition, Society for Industrial and Applied Mathematics,
            2008, ISBN: 978-0-898716-59-7, chapter 15
          - Bruce Christianson, 'Reverse accumulation and attractive fixed
            points', Optimization Methods and Software 3(4), pp. 311--326
            1994, doi: https://doi.org/10.1080/10556789408805572
          - Zico Kolter, David Duvenaud, and Matt Johnson, 'Deep implicit
            layers - neural ODEs, deep equilibirum models, and beyond',
            https://implicit-layers-tutorial.org/ [accessed 2024-08-26],
            chapter 2

      :Parameters:

          **update** : callable
              A callable accepting a :class:`.Solver` as the zeroth argument and
              the elements of `m` as remaining positional arguments, and which
              updates the values of control variables.

          **args** : tuple
              Passed to `update`.

          **tol** : Real
              Tolerance. The system is timestepped until
              
              .. math::
              
                  \left\| \zeta_{n + 1} - \zeta_n \right\|_\infty
                      \le \varepsilon \left\| \zeta_{n + 1} \right\|_\infty,
              
              where :math:`\zeta_n` is the degree-of-freedom vector on timestep
              :math:`n` and :math:`\varepsilon` is the tolerance.

          **max_it** : Integral
              Maximum number of iterations.



      :Returns:

          int
              The number of iterations.











      ..
          !! processed by numpydoc !!

   .. py:method:: write(h, path='solver')

      
      Write solver.


      :Parameters:

          **h** : :class:`h5py.Group` or :class:`zarr.hierarchy.Group`
              Parent group.

          **path** : str
              Group path.



      :Returns:

          :class:`h5py.Group` or :class:`zarr.hierarchy.Group`
              Group storing the solver.











      ..
          !! processed by numpydoc !!

   .. py:method:: read(h, path='solver')
      :classmethod:

      
      Read solver.


      :Parameters:

          **h** : :class:`h5py.Group` or :class:`zarr.hierarchy.Group`
              Parent group.

          **path** : str
              Group path.



      :Returns:

          :class:`.Solver`
              The solver.











      ..
          !! processed by numpydoc !!

   .. py:method:: new(*, copy_prescribed=False)

      
      Return a new :class:`.Solver` with the same configuration as this
      :class:`.Solver`.


      :Parameters:

          **copy_prescribed** : bool
              Whether to copy values of prescribed fields to the new
              :class:`.Solver`.



      :Returns:

          :class:`.Solver`
              The new :class:`.Solver`.











      ..
          !! processed by numpydoc !!

   .. py:method:: update(model)

      
      Update the state of this :class:`.Solver`.


      :Parameters:

          **model** : :class:`.Solver`
              Defines the new state of this :class:`.Solver`.














      ..
          !! processed by numpydoc !!

   .. py:method:: flatten()

      
      Return a JAX flattened representation.





      :Returns:

          Sequence[Sequence[object, ...], Sequence[object, ...]]
              ..











      ..
          !! processed by numpydoc !!

   .. py:method:: unflatten(aux_data, children)
      :classmethod:

      
      Unpack a JAX flattened representation.
















      ..
          !! processed by numpydoc !!


.. py:class:: CNAB2Solver(parameters, *, idtype=None, fdtype=None)




   
   Finite difference solver for the 2D barotropic vorticity equation on a
   beta-plane, using a CNAB2 time discretization.

   CNAB2 reference:

       - Uri M. Ascher, Steven J. Ruuth, and Brian T. R. Wetton,
         'Implicit-explicit methods for time-dependent partial differential
         equations', SIAM Journal on Numerical Analysis 32(3), 797--823, 1995,
         https://doi.org/10.1137/0732037

   :Parameters:

       **See :class:`.Solver`.**
           ..














   ..
       !! processed by numpydoc !!
   .. py:method:: modified_helmholtz_solver() -> bt_ocean.inversion.ModifiedHelmholtzSolver

      
      Modified Helmholtz solver used for the implicit time discretization.
















      ..
          !! processed by numpydoc !!

   .. py:method:: initialize(zeta=None)

      
      Initialize the model.


      :Parameters:

          **zeta** : :class:`jax.Array`
              Initial relative vorticity field. `None` indicates a zero-valued
              field.














      ..
          !! processed by numpydoc !!

   .. py:method:: step()

      
      Take a timestep.
















      ..
          !! processed by numpydoc !!

   .. py:method:: steady_state_solve(*args, update=lambda model, *args: None, tol, max_it=10000)

      
      Timestep to steady-state.

      Uses timestepping to define a fixed-point iteration, and applies
      reverse mode differentiation using a two-phase approach.

      References:

          - Andreas Griewank and Andrea Walther, 'Evaluating derivatives',
            second edition, Society for Industrial and Applied Mathematics,
            2008, ISBN: 978-0-898716-59-7, chapter 15
          - Bruce Christianson, 'Reverse accumulation and attractive fixed
            points', Optimization Methods and Software 3(4), pp. 311--326
            1994, doi: https://doi.org/10.1080/10556789408805572
          - Zico Kolter, David Duvenaud, and Matt Johnson, 'Deep implicit
            layers - neural ODEs, deep equilibirum models, and beyond',
            https://implicit-layers-tutorial.org/ [accessed 2024-08-26],
            chapter 2

      :Parameters:

          **update** : callable
              A callable accepting a :class:`.Solver` as the zeroth argument and
              the elements of `m` as remaining positional arguments, and which
              updates the values of control variables.

          **args** : tuple
              Passed to `update`.

          **tol** : Real
              Tolerance. The system is timestepped until
              
              .. math::
              
                  \left\| \zeta_{n + 1} - \zeta_n \right\|_\infty
                      \le \varepsilon \left\| \zeta_{n + 1} \right\|_\infty,
              
              where :math:`\zeta_n` is the degree-of-freedom vector on timestep
              :math:`n` and :math:`\varepsilon` is the tolerance.

          **max_it** : Integral
              Maximum number of iterations.



      :Returns:

          int
              The number of iterations.











      ..
          !! processed by numpydoc !!


